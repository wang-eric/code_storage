import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox

# Function to select input file
def select_input_file():
    file_path = filedialog.askopenfilename()  # No file type restriction
    input_file_entry.delete(0, tk.END)
    input_file_entry.insert(0, file_path)

# Function to process the file
def process_file():
    try:
        # Get input file and numbers list
        input_file_path = input_file_entry.get()
        numbers = numbers_text.get("1.0", tk.END).split()

        # Open files and read content
        with open(input_file_path, 'r') as input_file, open('output_file.txt', 'w') as output_file:
            lines = input_file.readlines()
            
            # Copy first row
            output_file.write(lines[0])
            
            # Find numbers in the first 20 characters of each row and copy matching rows
            found_count = 0
            found_numbers = set()
            for line in lines[1:-1]:  # Skip first and last lines for this loop
                first_20_chars = line[:20]
                for number in numbers:
                    if number in first_20_chars:
                        output_file.write(line)
                        found_numbers.add(number)
                        found_count += 1
                        break  # No need to check the rest of the numbers for this line
            
            # Copy last row and append the count
            last_line = lines[-1].strip() + f" Found Records: {found_count}\n"
            output_file.write(last_line)

            # List numbers that were not found
            not_found_numbers = [number for number in numbers if number not in found_numbers]
            output_file.write("\nNumbers not found in the file:\n")
            output_file.write(", ".join(not_found_numbers) + "\n")
        
        messagebox.showinfo("Success", "File processed and output_file.txt has been created.")
    
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

# Function to clear the number field
def reset_number_field():
    numbers_text.delete("1.0", tk.END)

# Create the UI
root = tk.Tk()
root.title("Number Search and File Processor")

# Input file selection
tk.Label(root, text="Select Input File:").grid(row=0, column=0, padx=10, pady=10)
input_file_entry = tk.Entry(root, width=50)
input_file_entry.grid(row=0, column=1, padx=10, pady=10)
tk.Button(root, text="Browse", command=select_input_file).grid(row=0, column=2, padx=10, pady=10)

# Numbers input (Text Area for 500 lines)
tk.Label(root, text="Enter Numbers (one per line, up to 500 lines):").grid(row=1, column=0, padx=10, pady=10)
numbers_text = tk.Text(root, width=50, height=30)  # Adjusted height for more lines
numbers_text.grid(row=1, column=1, padx=10, pady=10, columnspan=2)

# Process button
tk.Button(root, text="Process File", command=process_file).grid(row=2, column=0, columnspan=3, pady=10)

# Reset button to clear the number field
tk.Button(root, text="Reset", command=reset_number_field).grid(row=3, column=0, columnspan=3, pady=10)

# Run the UI
root.mainloop()
